// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/btcbridge/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSubmitWithdrawStatusRequest defines the Msg/SubmitWithdrawStatus request type.
type MsgSubmitWithdrawStatusRequest struct {
	Sender   string         `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Sequence uint64         `protobuf:"varint,2,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Txid     string         `protobuf:"bytes,3,opt,name=txid,proto3" json:"txid,omitempty"`
	Status   WithdrawStatus `protobuf:"varint,4,opt,name=status,proto3,enum=side.btcbridge.WithdrawStatus" json:"status,omitempty"`
}

func (m *MsgSubmitWithdrawStatusRequest) Reset()         { *m = MsgSubmitWithdrawStatusRequest{} }
func (m *MsgSubmitWithdrawStatusRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitWithdrawStatusRequest) ProtoMessage()    {}
func (*MsgSubmitWithdrawStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{0}
}
func (m *MsgSubmitWithdrawStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitWithdrawStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitWithdrawStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitWithdrawStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitWithdrawStatusRequest.Merge(m, src)
}
func (m *MsgSubmitWithdrawStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitWithdrawStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitWithdrawStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitWithdrawStatusRequest proto.InternalMessageInfo

func (m *MsgSubmitWithdrawStatusRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitWithdrawStatusRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *MsgSubmitWithdrawStatusRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *MsgSubmitWithdrawStatusRequest) GetStatus() WithdrawStatus {
	if m != nil {
		return m.Status
	}
	return WithdrawStatus_WITHDRAW_STATUS_UNSPECIFIED
}

// MsgSubmitWithdrawStatusResponse defines the Msg/SubmitWithdrawStatus response type.
type MsgSubmitWithdrawStatusResponse struct {
}

func (m *MsgSubmitWithdrawStatusResponse) Reset()         { *m = MsgSubmitWithdrawStatusResponse{} }
func (m *MsgSubmitWithdrawStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitWithdrawStatusResponse) ProtoMessage()    {}
func (*MsgSubmitWithdrawStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{1}
}
func (m *MsgSubmitWithdrawStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitWithdrawStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitWithdrawStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitWithdrawStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitWithdrawStatusResponse.Merge(m, src)
}
func (m *MsgSubmitWithdrawStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitWithdrawStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitWithdrawStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitWithdrawStatusResponse proto.InternalMessageInfo

// MsgBlockHeaderRequest defines the Msg/SubmitBlockHeaders request type.
type MsgSubmitBlockHeaderRequest struct {
	Sender       string         `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	BlockHeaders []*BlockHeader `protobuf:"bytes,2,rep,name=block_headers,json=blockHeaders,proto3" json:"block_headers,omitempty"`
}

func (m *MsgSubmitBlockHeaderRequest) Reset()         { *m = MsgSubmitBlockHeaderRequest{} }
func (m *MsgSubmitBlockHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBlockHeaderRequest) ProtoMessage()    {}
func (*MsgSubmitBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{2}
}
func (m *MsgSubmitBlockHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBlockHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBlockHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBlockHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBlockHeaderRequest.Merge(m, src)
}
func (m *MsgSubmitBlockHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBlockHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBlockHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBlockHeaderRequest proto.InternalMessageInfo

func (m *MsgSubmitBlockHeaderRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitBlockHeaderRequest) GetBlockHeaders() []*BlockHeader {
	if m != nil {
		return m.BlockHeaders
	}
	return nil
}

// MsgSubmitBlockHeadersResponse defines the Msg/SubmitBlockHeaders response type.
type MsgSubmitBlockHeadersResponse struct {
}

func (m *MsgSubmitBlockHeadersResponse) Reset()         { *m = MsgSubmitBlockHeadersResponse{} }
func (m *MsgSubmitBlockHeadersResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitBlockHeadersResponse) ProtoMessage()    {}
func (*MsgSubmitBlockHeadersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{3}
}
func (m *MsgSubmitBlockHeadersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitBlockHeadersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitBlockHeadersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitBlockHeadersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitBlockHeadersResponse.Merge(m, src)
}
func (m *MsgSubmitBlockHeadersResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitBlockHeadersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitBlockHeadersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitBlockHeadersResponse proto.InternalMessageInfo

// MsgSubmitTransactionRequest defines the Msg/SubmitTransaction request type.
type MsgSubmitDepositTransactionRequest struct {
	// this is relayer address who submit the bitcoin transaction to the side chain
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Blockhash string `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	// the tx bytes in base64 format
	// used for parsing the sender of the transaction
	PrevTxBytes string `protobuf:"bytes,3,opt,name=prev_tx_bytes,json=prevTxBytes,proto3" json:"prev_tx_bytes,omitempty"`
	// the tx bytes in base64 format
	TxBytes string   `protobuf:"bytes,4,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	Proof   []string `protobuf:"bytes,5,rep,name=proof,proto3" json:"proof,omitempty"`
}

func (m *MsgSubmitDepositTransactionRequest) Reset()         { *m = MsgSubmitDepositTransactionRequest{} }
func (m *MsgSubmitDepositTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitDepositTransactionRequest) ProtoMessage()    {}
func (*MsgSubmitDepositTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{4}
}
func (m *MsgSubmitDepositTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitDepositTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitDepositTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitDepositTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitDepositTransactionRequest.Merge(m, src)
}
func (m *MsgSubmitDepositTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitDepositTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitDepositTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitDepositTransactionRequest proto.InternalMessageInfo

func (m *MsgSubmitDepositTransactionRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitDepositTransactionRequest) GetBlockhash() string {
	if m != nil {
		return m.Blockhash
	}
	return ""
}

func (m *MsgSubmitDepositTransactionRequest) GetPrevTxBytes() string {
	if m != nil {
		return m.PrevTxBytes
	}
	return ""
}

func (m *MsgSubmitDepositTransactionRequest) GetTxBytes() string {
	if m != nil {
		return m.TxBytes
	}
	return ""
}

func (m *MsgSubmitDepositTransactionRequest) GetProof() []string {
	if m != nil {
		return m.Proof
	}
	return nil
}

// MsgSubmitTransactionResponse defines the Msg/SubmitTransaction response type.
type MsgSubmitDepositTransactionResponse struct {
}

func (m *MsgSubmitDepositTransactionResponse) Reset()         { *m = MsgSubmitDepositTransactionResponse{} }
func (m *MsgSubmitDepositTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitDepositTransactionResponse) ProtoMessage()    {}
func (*MsgSubmitDepositTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{5}
}
func (m *MsgSubmitDepositTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitDepositTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitDepositTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitDepositTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitDepositTransactionResponse.Merge(m, src)
}
func (m *MsgSubmitDepositTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitDepositTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitDepositTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitDepositTransactionResponse proto.InternalMessageInfo

// MsgSubmitTransactionRequest defines the Msg/SubmitTransaction request type.
type MsgSubmitWithdrawTransactionRequest struct {
	// this is relayer address who submit the bitcoin transaction to the side chain
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	Blockhash string `protobuf:"bytes,2,opt,name=blockhash,proto3" json:"blockhash,omitempty"`
	// the tx bytes in base64 format
	TxBytes string   `protobuf:"bytes,4,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	Proof   []string `protobuf:"bytes,5,rep,name=proof,proto3" json:"proof,omitempty"`
}

func (m *MsgSubmitWithdrawTransactionRequest) Reset()         { *m = MsgSubmitWithdrawTransactionRequest{} }
func (m *MsgSubmitWithdrawTransactionRequest) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitWithdrawTransactionRequest) ProtoMessage()    {}
func (*MsgSubmitWithdrawTransactionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{6}
}
func (m *MsgSubmitWithdrawTransactionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitWithdrawTransactionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitWithdrawTransactionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitWithdrawTransactionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitWithdrawTransactionRequest.Merge(m, src)
}
func (m *MsgSubmitWithdrawTransactionRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitWithdrawTransactionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitWithdrawTransactionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitWithdrawTransactionRequest proto.InternalMessageInfo

func (m *MsgSubmitWithdrawTransactionRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSubmitWithdrawTransactionRequest) GetBlockhash() string {
	if m != nil {
		return m.Blockhash
	}
	return ""
}

func (m *MsgSubmitWithdrawTransactionRequest) GetTxBytes() string {
	if m != nil {
		return m.TxBytes
	}
	return ""
}

func (m *MsgSubmitWithdrawTransactionRequest) GetProof() []string {
	if m != nil {
		return m.Proof
	}
	return nil
}

// MsgSubmitTransactionResponse defines the Msg/SubmitTransaction response type.
type MsgSubmitWithdrawTransactionResponse struct {
}

func (m *MsgSubmitWithdrawTransactionResponse) Reset()         { *m = MsgSubmitWithdrawTransactionResponse{} }
func (m *MsgSubmitWithdrawTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSubmitWithdrawTransactionResponse) ProtoMessage()    {}
func (*MsgSubmitWithdrawTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{7}
}
func (m *MsgSubmitWithdrawTransactionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSubmitWithdrawTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSubmitWithdrawTransactionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSubmitWithdrawTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSubmitWithdrawTransactionResponse.Merge(m, src)
}
func (m *MsgSubmitWithdrawTransactionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSubmitWithdrawTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSubmitWithdrawTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSubmitWithdrawTransactionResponse proto.InternalMessageInfo

// MsgWithdrawBitcoinRequest defines the Msg/WithdrawBitcoin request type.
type MsgWithdrawBitcoinRequest struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// withdraw amount in satoshi, etc: 100000000sat = 1btc
	Amount string `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgWithdrawBitcoinRequest) Reset()         { *m = MsgWithdrawBitcoinRequest{} }
func (m *MsgWithdrawBitcoinRequest) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawBitcoinRequest) ProtoMessage()    {}
func (*MsgWithdrawBitcoinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{8}
}
func (m *MsgWithdrawBitcoinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawBitcoinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawBitcoinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawBitcoinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawBitcoinRequest.Merge(m, src)
}
func (m *MsgWithdrawBitcoinRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawBitcoinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawBitcoinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawBitcoinRequest proto.InternalMessageInfo

func (m *MsgWithdrawBitcoinRequest) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgWithdrawBitcoinRequest) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

// MsgWithdrawBitcoinResponse defines the Msg/WithdrawBitcoin response type.
type MsgWithdrawBitcoinResponse struct {
}

func (m *MsgWithdrawBitcoinResponse) Reset()         { *m = MsgWithdrawBitcoinResponse{} }
func (m *MsgWithdrawBitcoinResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawBitcoinResponse) ProtoMessage()    {}
func (*MsgWithdrawBitcoinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{9}
}
func (m *MsgWithdrawBitcoinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawBitcoinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawBitcoinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawBitcoinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawBitcoinResponse.Merge(m, src)
}
func (m *MsgWithdrawBitcoinResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawBitcoinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawBitcoinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawBitcoinResponse proto.InternalMessageInfo

// MsgUpdateParamsRequest is the Msg/UpdateParams request type.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParamsRequest struct {
	// authority is the address that controls the module (defaults to x/gov unless overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// params defines the x/btcbridge parameters to be updated.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParamsRequest) Reset()         { *m = MsgUpdateParamsRequest{} }
func (m *MsgUpdateParamsRequest) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsRequest) ProtoMessage()    {}
func (*MsgUpdateParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{10}
}
func (m *MsgUpdateParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsRequest.Merge(m, src)
}
func (m *MsgUpdateParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsRequest proto.InternalMessageInfo

func (m *MsgUpdateParamsRequest) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParamsRequest) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse defines the Msg/UpdateParams response type.
//
// Since: cosmos-sdk 0.47
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_785ca8e1e4227068, []int{11}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSubmitWithdrawStatusRequest)(nil), "side.btcbridge.MsgSubmitWithdrawStatusRequest")
	proto.RegisterType((*MsgSubmitWithdrawStatusResponse)(nil), "side.btcbridge.MsgSubmitWithdrawStatusResponse")
	proto.RegisterType((*MsgSubmitBlockHeaderRequest)(nil), "side.btcbridge.MsgSubmitBlockHeaderRequest")
	proto.RegisterType((*MsgSubmitBlockHeadersResponse)(nil), "side.btcbridge.MsgSubmitBlockHeadersResponse")
	proto.RegisterType((*MsgSubmitDepositTransactionRequest)(nil), "side.btcbridge.MsgSubmitDepositTransactionRequest")
	proto.RegisterType((*MsgSubmitDepositTransactionResponse)(nil), "side.btcbridge.MsgSubmitDepositTransactionResponse")
	proto.RegisterType((*MsgSubmitWithdrawTransactionRequest)(nil), "side.btcbridge.MsgSubmitWithdrawTransactionRequest")
	proto.RegisterType((*MsgSubmitWithdrawTransactionResponse)(nil), "side.btcbridge.MsgSubmitWithdrawTransactionResponse")
	proto.RegisterType((*MsgWithdrawBitcoinRequest)(nil), "side.btcbridge.MsgWithdrawBitcoinRequest")
	proto.RegisterType((*MsgWithdrawBitcoinResponse)(nil), "side.btcbridge.MsgWithdrawBitcoinResponse")
	proto.RegisterType((*MsgUpdateParamsRequest)(nil), "side.btcbridge.MsgUpdateParamsRequest")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "side.btcbridge.MsgUpdateParamsResponse")
}

func init() { proto.RegisterFile("side/btcbridge/tx.proto", fileDescriptor_785ca8e1e4227068) }

var fileDescriptor_785ca8e1e4227068 = []byte{
	// 654 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0xcb, 0x6e, 0xd3, 0x40,
	0x14, 0xcd, 0x34, 0x69, 0x68, 0x6e, 0x1f, 0x48, 0xa3, 0x2a, 0x75, 0xdc, 0xe0, 0x06, 0x03, 0x25,
	0x80, 0x70, 0xa4, 0xb4, 0x62, 0x8d, 0x22, 0x16, 0x95, 0x50, 0x24, 0x94, 0x16, 0x21, 0xb1, 0x89,
	0xfc, 0x18, 0x6c, 0x8b, 0xc6, 0x63, 0x3c, 0x13, 0x9a, 0xae, 0x91, 0x58, 0xb1, 0xe0, 0x13, 0xf8,
	0x03, 0x7e, 0xa3, 0x62, 0xd5, 0x25, 0x2b, 0x84, 0xda, 0x1f, 0x41, 0x1e, 0x4f, 0x9d, 0xd4, 0xb5,
	0x9b, 0x56, 0x62, 0xe7, 0x3b, 0xe7, 0xcc, 0x39, 0x67, 0xec, 0x7b, 0x3d, 0xb0, 0xc1, 0x7c, 0x87,
	0x74, 0x2c, 0x6e, 0x5b, 0x91, 0xef, 0xb8, 0xa4, 0xc3, 0x27, 0x46, 0x18, 0x51, 0x4e, 0xf1, 0x5a,
	0x0c, 0x18, 0x29, 0xa0, 0xae, 0xbb, 0xd4, 0xa5, 0x02, 0xea, 0xc4, 0x4f, 0x09, 0x4b, 0xdd, 0xcc,
	0x6c, 0x0f, 0xcd, 0xc8, 0x1c, 0x31, 0x09, 0x36, 0x33, 0xa0, 0xe5, 0x73, 0x9b, 0xfa, 0x41, 0x82,
	0xea, 0x3f, 0x10, 0x68, 0x7d, 0xe6, 0xee, 0x8f, 0xad, 0x91, 0xcf, 0xdf, 0xf9, 0xdc, 0x73, 0x22,
	0xf3, 0x68, 0x9f, 0x9b, 0x7c, 0xcc, 0x06, 0xe4, 0xd3, 0x98, 0x30, 0x8e, 0xeb, 0x50, 0x65, 0x24,
	0x70, 0x48, 0xa4, 0xa0, 0x16, 0x6a, 0xd7, 0x06, 0xb2, 0xc2, 0x2a, 0x2c, 0xb1, 0x98, 0x12, 0xd8,
	0x44, 0x59, 0x68, 0xa1, 0x76, 0x65, 0x90, 0xd6, 0x18, 0x43, 0x85, 0x4f, 0x7c, 0x47, 0x29, 0x8b,
	0x1d, 0xe2, 0x19, 0xbf, 0x80, 0x2a, 0x13, 0xc2, 0x4a, 0xa5, 0x85, 0xda, 0x6b, 0x5d, 0xcd, 0xb8,
	0x7c, 0x38, 0x23, 0x63, 0x2f, 0xd9, 0xfa, 0x7d, 0xd8, 0x2a, 0x4c, 0xc8, 0x42, 0x1a, 0x30, 0xa2,
	0x1f, 0xc1, 0x66, 0x4a, 0xe9, 0x1d, 0x52, 0xfb, 0xe3, 0x1e, 0x31, 0x1d, 0x12, 0xcd, 0x3b, 0xc1,
	0x4b, 0x58, 0xb5, 0x62, 0xf6, 0xd0, 0x13, 0x74, 0xa6, 0x2c, 0xb4, 0xca, 0xed, 0xe5, 0xee, 0x66,
	0x36, 0xd8, 0xac, 0xe4, 0x8a, 0x35, 0x2d, 0x98, 0xbe, 0x05, 0xf7, 0xf2, 0x8c, 0xa7, 0xc9, 0x7e,
	0x22, 0xd0, 0x53, 0xc6, 0x2b, 0x12, 0x52, 0xe6, 0xf3, 0x83, 0xc8, 0x0c, 0x98, 0x69, 0x73, 0x9f,
	0x06, 0xf3, 0x12, 0x36, 0xa1, 0x26, 0xfc, 0x3c, 0x93, 0x79, 0xe2, 0x25, 0xd7, 0x06, 0xd3, 0x05,
	0xac, 0xc3, 0x6a, 0x18, 0x91, 0xcf, 0x43, 0x3e, 0x19, 0x5a, 0xc7, 0x9c, 0x30, 0xf9, 0xba, 0x97,
	0xe3, 0xc5, 0x83, 0x49, 0x2f, 0x5e, 0xc2, 0x0d, 0x58, 0x4a, 0xe1, 0x8a, 0x80, 0xef, 0x70, 0x09,
	0xad, 0xc3, 0x62, 0x18, 0x51, 0xfa, 0x41, 0x59, 0x6c, 0x95, 0xdb, 0xb5, 0x41, 0x52, 0xe8, 0x8f,
	0xe0, 0xc1, 0xb5, 0x81, 0xe5, 0xc1, 0xbe, 0xa1, 0x19, 0xde, 0xc5, 0x67, 0xf9, 0x6f, 0x27, 0xbb,
	0x75, 0xea, 0x6d, 0x78, 0x78, 0x7d, 0x1a, 0x19, 0xfb, 0x35, 0x34, 0xfa, 0xcc, 0xbd, 0x60, 0xf4,
	0x92, 0x59, 0x98, 0x97, 0xb5, 0x0e, 0x55, 0x73, 0x44, 0xc7, 0x01, 0x97, 0x41, 0x65, 0xa5, 0x37,
	0x41, 0xcd, 0x13, 0x93, 0x56, 0x87, 0x50, 0xef, 0x33, 0xf7, 0x6d, 0xe8, 0x98, 0x9c, 0xbc, 0x11,
	0x13, 0x79, 0xe1, 0xd3, 0x84, 0x9a, 0x39, 0xe6, 0x1e, 0x8d, 0x7c, 0x7e, 0x2c, 0xad, 0xa6, 0x0b,
	0x78, 0x17, 0xaa, 0xc9, 0x00, 0x0b, 0xb7, 0xe5, 0x6e, 0x3d, 0xdb, 0x8e, 0x89, 0x58, 0xaf, 0x72,
	0xf2, 0x67, 0xab, 0x34, 0x90, 0x5c, 0xbd, 0x01, 0x1b, 0x57, 0xdc, 0x92, 0x20, 0xdd, 0x5f, 0x8b,
	0x50, 0xee, 0x33, 0x17, 0x87, 0x80, 0xaf, 0x76, 0x2a, 0x7e, 0x96, 0x95, 0xbf, 0x66, 0x92, 0xd4,
	0xe7, 0x37, 0x21, 0xa7, 0xce, 0xf8, 0x0b, 0x02, 0xa5, 0xa8, 0x93, 0x70, 0xb7, 0x50, 0xab, 0x70,
	0x4e, 0xd4, 0x9d, 0x5b, 0xed, 0x91, 0x29, 0xbe, 0x22, 0x68, 0x14, 0x76, 0x06, 0x2e, 0x96, 0x2c,
	0xee, 0x6a, 0x75, 0xf7, 0x76, 0x9b, 0x64, 0x10, 0x0f, 0xee, 0x66, 0x9a, 0x05, 0x3f, 0xc9, 0x11,
	0xca, 0xef, 0x4e, 0xf5, 0xe9, 0x4d, 0xa8, 0xd2, 0xe9, 0x08, 0xd6, 0xf3, 0x7e, 0x98, 0xd8, 0x98,
	0x9b, 0xfb, 0xd2, 0xbf, 0x5f, 0xed, 0xdc, 0x98, 0x2f, 0x8d, 0x87, 0xb0, 0x32, 0xdb, 0x83, 0x78,
	0x3b, 0x47, 0x20, 0x67, 0x24, 0xd4, 0xc7, 0x73, 0x79, 0x89, 0x41, 0x6f, 0xef, 0xe4, 0x4c, 0x43,
	0xa7, 0x67, 0x1a, 0xfa, 0x7b, 0xa6, 0xa1, 0xef, 0xe7, 0x5a, 0xe9, 0xf4, 0x5c, 0x2b, 0xfd, 0x3e,
	0xd7, 0x4a, 0xef, 0x0d, 0xd7, 0xe7, 0xde, 0xd8, 0x32, 0x6c, 0x3a, 0xea, 0xc4, 0x62, 0xe2, 0x82,
	0xb3, 0xe9, 0xa1, 0x28, 0x3a, 0x93, 0xd9, 0xeb, 0xf5, 0x38, 0x24, 0xcc, 0xaa, 0x0a, 0xc2, 0xce,
	0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0xcb, 0xb1, 0x76, 0x7d, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SubmitBlockHeaders submits bitcoin block headers to the side chain.
	SubmitBlockHeaders(ctx context.Context, in *MsgSubmitBlockHeaderRequest, opts ...grpc.CallOption) (*MsgSubmitBlockHeadersResponse, error)
	// SubmitDepositTransaction submits bitcoin transaction to the side chain.
	SubmitDepositTransaction(ctx context.Context, in *MsgSubmitDepositTransactionRequest, opts ...grpc.CallOption) (*MsgSubmitDepositTransactionResponse, error)
	// SubmitWithdrawalTransaction submits bitcoin transaction to the side chain.
	SubmitWithdrawTransaction(ctx context.Context, in *MsgSubmitWithdrawTransactionRequest, opts ...grpc.CallOption) (*MsgSubmitWithdrawTransactionResponse, error)
	// WithdrawBitcoin withdraws the bitcoin from the side chain.
	WithdrawBitcoin(ctx context.Context, in *MsgWithdrawBitcoinRequest, opts ...grpc.CallOption) (*MsgWithdrawBitcoinResponse, error)
	// SubmitWithdrawStatus submits the status of the withdraw transaction.
	SubmitWithdrawStatus(ctx context.Context, in *MsgSubmitWithdrawStatusRequest, opts ...grpc.CallOption) (*MsgSubmitWithdrawStatusResponse, error)
	// UpdateParams defines a governance operation for updating the x/btcbridge module
	// parameters. The authority defaults to the x/gov module account.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(ctx context.Context, in *MsgUpdateParamsRequest, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SubmitBlockHeaders(ctx context.Context, in *MsgSubmitBlockHeaderRequest, opts ...grpc.CallOption) (*MsgSubmitBlockHeadersResponse, error) {
	out := new(MsgSubmitBlockHeadersResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Msg/SubmitBlockHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitDepositTransaction(ctx context.Context, in *MsgSubmitDepositTransactionRequest, opts ...grpc.CallOption) (*MsgSubmitDepositTransactionResponse, error) {
	out := new(MsgSubmitDepositTransactionResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Msg/SubmitDepositTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitWithdrawTransaction(ctx context.Context, in *MsgSubmitWithdrawTransactionRequest, opts ...grpc.CallOption) (*MsgSubmitWithdrawTransactionResponse, error) {
	out := new(MsgSubmitWithdrawTransactionResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Msg/SubmitWithdrawTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawBitcoin(ctx context.Context, in *MsgWithdrawBitcoinRequest, opts ...grpc.CallOption) (*MsgWithdrawBitcoinResponse, error) {
	out := new(MsgWithdrawBitcoinResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Msg/WithdrawBitcoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SubmitWithdrawStatus(ctx context.Context, in *MsgSubmitWithdrawStatusRequest, opts ...grpc.CallOption) (*MsgSubmitWithdrawStatusResponse, error) {
	out := new(MsgSubmitWithdrawStatusResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Msg/SubmitWithdrawStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParamsRequest, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/side.btcbridge.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SubmitBlockHeaders submits bitcoin block headers to the side chain.
	SubmitBlockHeaders(context.Context, *MsgSubmitBlockHeaderRequest) (*MsgSubmitBlockHeadersResponse, error)
	// SubmitDepositTransaction submits bitcoin transaction to the side chain.
	SubmitDepositTransaction(context.Context, *MsgSubmitDepositTransactionRequest) (*MsgSubmitDepositTransactionResponse, error)
	// SubmitWithdrawalTransaction submits bitcoin transaction to the side chain.
	SubmitWithdrawTransaction(context.Context, *MsgSubmitWithdrawTransactionRequest) (*MsgSubmitWithdrawTransactionResponse, error)
	// WithdrawBitcoin withdraws the bitcoin from the side chain.
	WithdrawBitcoin(context.Context, *MsgWithdrawBitcoinRequest) (*MsgWithdrawBitcoinResponse, error)
	// SubmitWithdrawStatus submits the status of the withdraw transaction.
	SubmitWithdrawStatus(context.Context, *MsgSubmitWithdrawStatusRequest) (*MsgSubmitWithdrawStatusResponse, error)
	// UpdateParams defines a governance operation for updating the x/btcbridge module
	// parameters. The authority defaults to the x/gov module account.
	//
	// Since: cosmos-sdk 0.47
	UpdateParams(context.Context, *MsgUpdateParamsRequest) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SubmitBlockHeaders(ctx context.Context, req *MsgSubmitBlockHeaderRequest) (*MsgSubmitBlockHeadersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlockHeaders not implemented")
}
func (*UnimplementedMsgServer) SubmitDepositTransaction(ctx context.Context, req *MsgSubmitDepositTransactionRequest) (*MsgSubmitDepositTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDepositTransaction not implemented")
}
func (*UnimplementedMsgServer) SubmitWithdrawTransaction(ctx context.Context, req *MsgSubmitWithdrawTransactionRequest) (*MsgSubmitWithdrawTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWithdrawTransaction not implemented")
}
func (*UnimplementedMsgServer) WithdrawBitcoin(ctx context.Context, req *MsgWithdrawBitcoinRequest) (*MsgWithdrawBitcoinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawBitcoin not implemented")
}
func (*UnimplementedMsgServer) SubmitWithdrawStatus(ctx context.Context, req *MsgSubmitWithdrawStatusRequest) (*MsgSubmitWithdrawStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitWithdrawStatus not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParamsRequest) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SubmitBlockHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitBlockHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Msg/SubmitBlockHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitBlockHeaders(ctx, req.(*MsgSubmitBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitDepositTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitDepositTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitDepositTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Msg/SubmitDepositTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitDepositTransaction(ctx, req.(*MsgSubmitDepositTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitWithdrawTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitWithdrawTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitWithdrawTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Msg/SubmitWithdrawTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitWithdrawTransaction(ctx, req.(*MsgSubmitWithdrawTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawBitcoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawBitcoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawBitcoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Msg/WithdrawBitcoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawBitcoin(ctx, req.(*MsgWithdrawBitcoinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SubmitWithdrawStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSubmitWithdrawStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SubmitWithdrawStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Msg/SubmitWithdrawStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SubmitWithdrawStatus(ctx, req.(*MsgSubmitWithdrawStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/side.btcbridge.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "side.btcbridge.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitBlockHeaders",
			Handler:    _Msg_SubmitBlockHeaders_Handler,
		},
		{
			MethodName: "SubmitDepositTransaction",
			Handler:    _Msg_SubmitDepositTransaction_Handler,
		},
		{
			MethodName: "SubmitWithdrawTransaction",
			Handler:    _Msg_SubmitWithdrawTransaction_Handler,
		},
		{
			MethodName: "WithdrawBitcoin",
			Handler:    _Msg_WithdrawBitcoin_Handler,
		},
		{
			MethodName: "SubmitWithdrawStatus",
			Handler:    _Msg_SubmitWithdrawStatus_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "side/btcbridge/tx.proto",
}

func (m *MsgSubmitWithdrawStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitWithdrawStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitWithdrawStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Sequence != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitWithdrawStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitWithdrawStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitWithdrawStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBlockHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBlockHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBlockHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHeaders) > 0 {
		for iNdEx := len(m.BlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitBlockHeadersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitBlockHeadersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitBlockHeadersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitDepositTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitDepositTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitDepositTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		for iNdEx := len(m.Proof) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proof[iNdEx])
			copy(dAtA[i:], m.Proof[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Proof[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TxBytes) > 0 {
		i -= len(m.TxBytes)
		copy(dAtA[i:], m.TxBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxBytes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PrevTxBytes) > 0 {
		i -= len(m.PrevTxBytes)
		copy(dAtA[i:], m.PrevTxBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.PrevTxBytes)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitDepositTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitDepositTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitDepositTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSubmitWithdrawTransactionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitWithdrawTransactionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitWithdrawTransactionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		for iNdEx := len(m.Proof) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Proof[iNdEx])
			copy(dAtA[i:], m.Proof[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Proof[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.TxBytes) > 0 {
		i -= len(m.TxBytes)
		copy(dAtA[i:], m.TxBytes)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxBytes)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Blockhash) > 0 {
		i -= len(m.Blockhash)
		copy(dAtA[i:], m.Blockhash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Blockhash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSubmitWithdrawTransactionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSubmitWithdrawTransactionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSubmitWithdrawTransactionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawBitcoinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawBitcoinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawBitcoinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawBitcoinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawBitcoinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawBitcoinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSubmitWithdrawStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Sequence != 0 {
		n += 1 + sovTx(uint64(m.Sequence))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	return n
}

func (m *MsgSubmitWithdrawStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitBlockHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BlockHeaders) > 0 {
		for _, e := range m.BlockHeaders {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitBlockHeadersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitDepositTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.PrevTxBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Proof) > 0 {
		for _, s := range m.Proof {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitDepositTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSubmitWithdrawTransactionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Blockhash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxBytes)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Proof) > 0 {
		for _, s := range m.Proof {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSubmitWithdrawTransactionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawBitcoinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawBitcoinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSubmitWithdrawStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitWithdrawStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitWithdrawStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WithdrawStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitWithdrawStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitWithdrawStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitWithdrawStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitBlockHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBlockHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBlockHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeaders = append(m.BlockHeaders, &BlockHeader{})
			if err := m.BlockHeaders[len(m.BlockHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitBlockHeadersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitBlockHeadersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitBlockHeadersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitDepositTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitDepositTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitDepositTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrevTxBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrevTxBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitDepositTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitDepositTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitDepositTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitWithdrawTransactionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitWithdrawTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitWithdrawTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blockhash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blockhash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxBytes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxBytes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = append(m.Proof, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSubmitWithdrawTransactionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSubmitWithdrawTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSubmitWithdrawTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawBitcoinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawBitcoinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawBitcoinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawBitcoinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawBitcoinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawBitcoinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
