// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: side/btcbridge/bitcoin.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Bitcoin Withdrawal Status
type WithdrawStatus int32

const (
	// WITHDRAW_STATUS_UNSPECIFIED - Default value, should not be used
	WithdrawStatus_WITHDRAW_STATUS_UNSPECIFIED WithdrawStatus = 0
	// WITHDRAW_STATUS_CREATED - The withdrawal request is created
	WithdrawStatus_WITHDRAW_STATUS_CREATED WithdrawStatus = 1
	// WITHDRAW_STATUS_BROADCASTED - The withdrawal tx is broadcasted
	WithdrawStatus_WITHDRAW_STATUS_BROADCASTED WithdrawStatus = 2
	// WITHDRAW_STATUS_CONFIRMED - The withdrawal tx is confirmed
	WithdrawStatus_WITHDRAW_STATUS_CONFIRMED WithdrawStatus = 3
)

var WithdrawStatus_name = map[int32]string{
	0: "WITHDRAW_STATUS_UNSPECIFIED",
	1: "WITHDRAW_STATUS_CREATED",
	2: "WITHDRAW_STATUS_BROADCASTED",
	3: "WITHDRAW_STATUS_CONFIRMED",
}

var WithdrawStatus_value = map[string]int32{
	"WITHDRAW_STATUS_UNSPECIFIED": 0,
	"WITHDRAW_STATUS_CREATED":     1,
	"WITHDRAW_STATUS_BROADCASTED": 2,
	"WITHDRAW_STATUS_CONFIRMED":   3,
}

func (x WithdrawStatus) String() string {
	return proto.EnumName(WithdrawStatus_name, int32(x))
}

func (WithdrawStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{0}
}

// Bitcoin Block Header
type BlockHeader struct {
	Version           uint64 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	Hash              string `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Height            uint64 `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
	PreviousBlockHash string `protobuf:"bytes,4,opt,name=previous_block_hash,json=previousBlockHash,proto3" json:"previous_block_hash,omitempty"`
	MerkleRoot        string `protobuf:"bytes,5,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty"`
	Nonce             uint64 `protobuf:"varint,6,opt,name=nonce,proto3" json:"nonce,omitempty"`
	Bits              string `protobuf:"bytes,7,opt,name=bits,proto3" json:"bits,omitempty"`
	Time              uint64 `protobuf:"varint,8,opt,name=time,proto3" json:"time,omitempty"`
	Ntx               uint64 `protobuf:"varint,9,opt,name=ntx,proto3" json:"ntx,omitempty"`
}

func (m *BlockHeader) Reset()         { *m = BlockHeader{} }
func (m *BlockHeader) String() string { return proto.CompactTextString(m) }
func (*BlockHeader) ProtoMessage()    {}
func (*BlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{0}
}
func (m *BlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeader.Merge(m, src)
}
func (m *BlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeader proto.InternalMessageInfo

func (m *BlockHeader) GetVersion() uint64 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *BlockHeader) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func (m *BlockHeader) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *BlockHeader) GetPreviousBlockHash() string {
	if m != nil {
		return m.PreviousBlockHash
	}
	return ""
}

func (m *BlockHeader) GetMerkleRoot() string {
	if m != nil {
		return m.MerkleRoot
	}
	return ""
}

func (m *BlockHeader) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *BlockHeader) GetBits() string {
	if m != nil {
		return m.Bits
	}
	return ""
}

func (m *BlockHeader) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *BlockHeader) GetNtx() uint64 {
	if m != nil {
		return m.Ntx
	}
	return 0
}

// Bitcoin Withdrawal Request
type BitcoinWithdrawRequest struct {
	Address  string         `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Amount   types.Coin     `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
	Sequence uint64         `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	Txid     string         `protobuf:"bytes,4,opt,name=txid,proto3" json:"txid,omitempty"`
	Status   WithdrawStatus `protobuf:"varint,5,opt,name=status,proto3,enum=side.btcbridge.WithdrawStatus" json:"status,omitempty"`
}

func (m *BitcoinWithdrawRequest) Reset()         { *m = BitcoinWithdrawRequest{} }
func (m *BitcoinWithdrawRequest) String() string { return proto.CompactTextString(m) }
func (*BitcoinWithdrawRequest) ProtoMessage()    {}
func (*BitcoinWithdrawRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{1}
}
func (m *BitcoinWithdrawRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BitcoinWithdrawRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BitcoinWithdrawRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BitcoinWithdrawRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BitcoinWithdrawRequest.Merge(m, src)
}
func (m *BitcoinWithdrawRequest) XXX_Size() int {
	return m.Size()
}
func (m *BitcoinWithdrawRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BitcoinWithdrawRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BitcoinWithdrawRequest proto.InternalMessageInfo

func (m *BitcoinWithdrawRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *BitcoinWithdrawRequest) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func (m *BitcoinWithdrawRequest) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func (m *BitcoinWithdrawRequest) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *BitcoinWithdrawRequest) GetStatus() WithdrawStatus {
	if m != nil {
		return m.Status
	}
	return WithdrawStatus_WITHDRAW_STATUS_UNSPECIFIED
}

// Rune ID
type RuneId struct {
	// block height
	Block uint64 `protobuf:"varint,1,opt,name=block,proto3" json:"block,omitempty"`
	// tx index
	Tx uint32 `protobuf:"varint,2,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *RuneId) Reset()         { *m = RuneId{} }
func (m *RuneId) String() string { return proto.CompactTextString(m) }
func (*RuneId) ProtoMessage()    {}
func (*RuneId) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{2}
}
func (m *RuneId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RuneId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RuneId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RuneId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RuneId.Merge(m, src)
}
func (m *RuneId) XXX_Size() int {
	return m.Size()
}
func (m *RuneId) XXX_DiscardUnknown() {
	xxx_messageInfo_RuneId.DiscardUnknown(m)
}

var xxx_messageInfo_RuneId proto.InternalMessageInfo

func (m *RuneId) GetBlock() uint64 {
	if m != nil {
		return m.Block
	}
	return 0
}

func (m *RuneId) GetTx() uint32 {
	if m != nil {
		return m.Tx
	}
	return 0
}

// Rune Edict
type Edict struct {
	Id     *RuneId `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Amount string  `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	Output uint32  `protobuf:"varint,3,opt,name=output,proto3" json:"output,omitempty"`
}

func (m *Edict) Reset()         { *m = Edict{} }
func (m *Edict) String() string { return proto.CompactTextString(m) }
func (*Edict) ProtoMessage()    {}
func (*Edict) Descriptor() ([]byte, []int) {
	return fileDescriptor_b004a69efe3c7d84, []int{3}
}
func (m *Edict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edict.Merge(m, src)
}
func (m *Edict) XXX_Size() int {
	return m.Size()
}
func (m *Edict) XXX_DiscardUnknown() {
	xxx_messageInfo_Edict.DiscardUnknown(m)
}

var xxx_messageInfo_Edict proto.InternalMessageInfo

func (m *Edict) GetId() *RuneId {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Edict) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Edict) GetOutput() uint32 {
	if m != nil {
		return m.Output
	}
	return 0
}

func init() {
	proto.RegisterEnum("side.btcbridge.WithdrawStatus", WithdrawStatus_name, WithdrawStatus_value)
	proto.RegisterType((*BlockHeader)(nil), "side.btcbridge.BlockHeader")
	proto.RegisterType((*BitcoinWithdrawRequest)(nil), "side.btcbridge.BitcoinWithdrawRequest")
	proto.RegisterType((*RuneId)(nil), "side.btcbridge.RuneId")
	proto.RegisterType((*Edict)(nil), "side.btcbridge.Edict")
}

func init() { proto.RegisterFile("side/btcbridge/bitcoin.proto", fileDescriptor_b004a69efe3c7d84) }

var fileDescriptor_b004a69efe3c7d84 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xcd, 0x6e, 0xda, 0x4c,
	0x14, 0x86, 0xb1, 0x01, 0x27, 0x0c, 0x0a, 0xe2, 0x9b, 0x2f, 0xa2, 0x0e, 0x69, 0x4d, 0xc4, 0xa2,
	0x8a, 0xba, 0x18, 0x2b, 0x54, 0x6a, 0xd7, 0xfc, 0x38, 0x82, 0x45, 0x93, 0x6a, 0x20, 0x42, 0xea,
	0xc6, 0xf2, 0xcf, 0x08, 0x8f, 0x02, 0x1e, 0xea, 0x19, 0x53, 0x7a, 0x13, 0x55, 0x2f, 0x2b, 0xcb,
	0x48, 0xdd, 0x74, 0x55, 0x55, 0x70, 0x0b, 0xbd, 0x80, 0x6a, 0xc6, 0x86, 0x26, 0x69, 0x77, 0xe7,
	0x9d, 0xf3, 0x9e, 0x33, 0xc7, 0xcf, 0xf1, 0x80, 0xe7, 0x9c, 0x86, 0xc4, 0xf6, 0x45, 0xe0, 0x27,
	0x34, 0x9c, 0x11, 0xdb, 0xa7, 0x22, 0x60, 0x34, 0x46, 0xcb, 0x84, 0x09, 0x06, 0x6b, 0x32, 0x8b,
	0xf6, 0xd9, 0xe6, 0xf1, 0x8c, 0xcd, 0x98, 0x4a, 0xd9, 0x32, 0xca, 0x5c, 0x4d, 0x2b, 0x60, 0x7c,
	0xc1, 0xb8, 0xed, 0x7b, 0x9c, 0xd8, 0xab, 0x0b, 0x9f, 0x08, 0xef, 0xc2, 0xfe, 0xd3, 0xa5, 0xfd,
	0x4b, 0x03, 0xd5, 0xde, 0x9c, 0x05, 0xb7, 0x43, 0xe2, 0x85, 0x24, 0x81, 0x26, 0x38, 0x58, 0x91,
	0x84, 0x53, 0x16, 0x9b, 0xda, 0x99, 0x76, 0x5e, 0xc2, 0x3b, 0x09, 0x21, 0x28, 0x45, 0x1e, 0x8f,
	0x4c, 0xfd, 0x4c, 0x3b, 0xaf, 0x60, 0x15, 0xc3, 0x06, 0x30, 0x22, 0x42, 0x67, 0x91, 0x30, 0x8b,
	0xca, 0x9c, 0x2b, 0x88, 0xc0, 0xff, 0xcb, 0x84, 0xac, 0x28, 0x4b, 0xb9, 0xeb, 0xcb, 0xee, 0xae,
	0x2a, 0x2d, 0xa9, 0xd2, 0xff, 0x76, 0xa9, 0xec, 0x5e, 0xd9, 0xa7, 0x05, 0xaa, 0x0b, 0x92, 0xdc,
	0xce, 0x89, 0x9b, 0x30, 0x26, 0xcc, 0xb2, 0xf2, 0x81, 0xec, 0x08, 0x33, 0x26, 0xe0, 0x31, 0x28,
	0xc7, 0x2c, 0x0e, 0x88, 0x69, 0xa8, 0x7b, 0x32, 0x21, 0x47, 0xf2, 0xa9, 0xe0, 0xe6, 0x41, 0x36,
	0x92, 0x8c, 0xe5, 0x99, 0xa0, 0x0b, 0x62, 0x1e, 0x2a, 0xa3, 0x8a, 0x61, 0x1d, 0x14, 0x63, 0xb1,
	0x36, 0x2b, 0xea, 0x48, 0x86, 0xed, 0x6f, 0x1a, 0x68, 0xf4, 0x32, 0x9c, 0x53, 0x2a, 0xa2, 0x30,
	0xf1, 0x3e, 0x61, 0xf2, 0x31, 0x25, 0x5c, 0x48, 0x02, 0x5e, 0x18, 0x26, 0x84, 0x73, 0x45, 0xa0,
	0x82, 0x77, 0x12, 0xbe, 0x05, 0x86, 0xb7, 0x60, 0x69, 0x2c, 0x14, 0x83, 0x6a, 0xe7, 0x04, 0x65,
	0x70, 0x91, 0x84, 0x8b, 0x72, 0xb8, 0xa8, 0xcf, 0x68, 0xdc, 0x2b, 0xdd, 0xfd, 0x68, 0x15, 0x70,
	0x6e, 0x87, 0x4d, 0x70, 0xc8, 0x65, 0x77, 0xf9, 0x01, 0x19, 0xa8, 0xbd, 0x56, 0xf3, 0xae, 0x69,
	0x98, 0xb3, 0x51, 0x31, 0x7c, 0x03, 0x0c, 0x2e, 0x3c, 0x91, 0x72, 0x45, 0xa2, 0xd6, 0xb1, 0xd0,
	0xe3, 0x5d, 0xa3, 0xdd, 0xcc, 0x63, 0xe5, 0xc2, 0xb9, 0xbb, 0x8d, 0x80, 0x81, 0xd3, 0x98, 0x8c,
	0x42, 0xc9, 0x4b, 0x71, 0xcf, 0x97, 0x98, 0x09, 0x58, 0x03, 0xba, 0x58, 0xab, 0xe1, 0x8f, 0xb0,
	0x2e, 0xd6, 0x6d, 0x17, 0x94, 0x9d, 0x90, 0x06, 0x02, 0xbe, 0x04, 0x3a, 0x0d, 0x95, 0xb7, 0xda,
	0x69, 0x3c, 0xbd, 0x2c, 0x6b, 0x89, 0x75, 0x1a, 0xca, 0x7d, 0x3f, 0x20, 0x50, 0xd9, 0x7f, 0x60,
	0x03, 0x18, 0x2c, 0x15, 0xcb, 0x34, 0xfb, 0x0f, 0x8e, 0x70, 0xae, 0x5e, 0x7d, 0xd1, 0x40, 0xed,
	0xf1, 0xac, 0xb0, 0x05, 0x4e, 0xa7, 0xa3, 0xc9, 0x70, 0x80, 0xbb, 0x53, 0x77, 0x3c, 0xe9, 0x4e,
	0x6e, 0xc6, 0xee, 0xcd, 0xd5, 0xf8, 0xbd, 0xd3, 0x1f, 0x5d, 0x8e, 0x9c, 0x41, 0xbd, 0x00, 0x4f,
	0xc1, 0xb3, 0xa7, 0x86, 0x3e, 0x76, 0xba, 0x13, 0x67, 0x50, 0xd7, 0xfe, 0x55, 0xdd, 0xc3, 0xd7,
	0xdd, 0x41, 0xbf, 0x3b, 0x96, 0x06, 0x1d, 0xbe, 0x00, 0x27, 0x7f, 0x55, 0x5f, 0x5f, 0x5d, 0x8e,
	0xf0, 0x3b, 0x67, 0x50, 0x2f, 0xf6, 0x86, 0x77, 0x1b, 0x4b, 0xbb, 0xdf, 0x58, 0xda, 0xcf, 0x8d,
	0xa5, 0x7d, 0xdd, 0x5a, 0x85, 0xfb, 0xad, 0x55, 0xf8, 0xbe, 0xb5, 0x0a, 0x1f, 0xd0, 0x8c, 0x8a,
	0x28, 0xf5, 0x51, 0xc0, 0x16, 0xb6, 0x04, 0xa0, 0x9e, 0x47, 0xc0, 0xe6, 0x4a, 0xd8, 0xeb, 0x07,
	0xcf, 0x50, 0x7c, 0x5e, 0x12, 0xee, 0x1b, 0xca, 0xf0, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xa3, 0xf2, 0x72, 0xd3, 0xa5, 0x03, 0x00, 0x00,
}

func (m *BlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ntx != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Ntx))
		i--
		dAtA[i] = 0x48
	}
	if m.Time != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Bits) > 0 {
		i -= len(m.Bits)
		copy(dAtA[i:], m.Bits)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Bits)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Nonce != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MerkleRoot) > 0 {
		i -= len(m.MerkleRoot)
		copy(dAtA[i:], m.MerkleRoot)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.MerkleRoot)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PreviousBlockHash) > 0 {
		i -= len(m.PreviousBlockHash)
		copy(dAtA[i:], m.PreviousBlockHash)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.PreviousBlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Height != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if m.Version != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BitcoinWithdrawRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BitcoinWithdrawRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BitcoinWithdrawRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Txid) > 0 {
		i -= len(m.Txid)
		copy(dAtA[i:], m.Txid)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Txid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Sequence != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBitcoin(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RuneId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RuneId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RuneId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tx != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Tx))
		i--
		dAtA[i] = 0x10
	}
	if m.Block != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Edict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Edict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Output != 0 {
		i = encodeVarintBitcoin(dAtA, i, uint64(m.Output))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintBitcoin(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != nil {
		{
			size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBitcoin(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBitcoin(dAtA []byte, offset int, v uint64) int {
	offset -= sovBitcoin(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovBitcoin(uint64(m.Version))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovBitcoin(uint64(m.Height))
	}
	l = len(m.PreviousBlockHash)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovBitcoin(uint64(m.Nonce))
	}
	l = len(m.Bits)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovBitcoin(uint64(m.Time))
	}
	if m.Ntx != 0 {
		n += 1 + sovBitcoin(uint64(m.Ntx))
	}
	return n
}

func (m *BitcoinWithdrawRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovBitcoin(uint64(l))
	if m.Sequence != 0 {
		n += 1 + sovBitcoin(uint64(m.Sequence))
	}
	l = len(m.Txid)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovBitcoin(uint64(m.Status))
	}
	return n
}

func (m *RuneId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Block != 0 {
		n += 1 + sovBitcoin(uint64(m.Block))
	}
	if m.Tx != 0 {
		n += 1 + sovBitcoin(uint64(m.Tx))
	}
	return n
}

func (m *Edict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != nil {
		l = m.Id.Size()
		n += 1 + l + sovBitcoin(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovBitcoin(uint64(l))
	}
	if m.Output != 0 {
		n += 1 + sovBitcoin(uint64(m.Output))
	}
	return n
}

func sovBitcoin(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBitcoin(x uint64) (n int) {
	return sovBitcoin(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousBlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PreviousBlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bits", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bits = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ntx", wireType)
			}
			m.Ntx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ntx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BitcoinWithdrawRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BitcoinWithdrawRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BitcoinWithdrawRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= WithdrawStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RuneId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RuneId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RuneId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			m.Tx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Edict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Edict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Edict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id == nil {
				m.Id = &RuneId{}
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBitcoin
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBitcoin
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Output", wireType)
			}
			m.Output = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Output |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBitcoin(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBitcoin
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBitcoin(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBitcoin
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBitcoin
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBitcoin
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBitcoin
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBitcoin
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBitcoin        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBitcoin          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBitcoin = fmt.Errorf("proto: unexpected end of group")
)
